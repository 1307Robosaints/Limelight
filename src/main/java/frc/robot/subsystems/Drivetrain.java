// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.Spark;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark mot_LeftFoward;
private Spark mot_LeftBack;
private Spark mot_RightFoward;
private Spark mot_RightBack;
private DifferentialDrive drive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
mot_LeftFoward = new Spark(2);
 addChild("Mot_LeftFoward",mot_LeftFoward);
 mot_LeftFoward.setInverted(false);

mot_LeftBack = new Spark(3);
 addChild("Mot_LeftBack",mot_LeftBack);
 mot_LeftFoward.addFollower(mot_LeftBack);
mot_LeftBack.setInverted(false);

mot_RightFoward = new Spark(1);
 addChild("Mot_RightFoward",mot_RightFoward);
 mot_RightFoward.setInverted(false);

mot_RightBack = new Spark(0);
 addChild("Mot_RightBack",mot_RightBack);
 mot_RightFoward.addFollower(mot_RightBack);
mot_RightBack.setInverted(false);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


drive = new DifferentialDrive(mot_LeftFoward, mot_RightFoward);
 addChild("Drive", drive);
 drive.setSafetyEnabled(true);
drive.setExpiration(0.1);
drive.setMaxOutput(1.0);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double speed, double turn){
        drive.arcadeDrive(speed, turn);
    }

}

